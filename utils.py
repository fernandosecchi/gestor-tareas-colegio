#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
================================================
        M√ìDULO DE UTILIDADES
================================================

Este m√≥dulo contiene funciones de utilidad general
que son usadas por otros m√≥dulos.

Responsabilidades:
- Funciones de formateo
- Mensajes del sistema
- Utilidades de interfaz
- Funciones auxiliares

Conceptos que aprender√°s:
- Funciones reutilizables
- Modularizaci√≥n del c√≥digo
- Separaci√≥n de responsabilidades
"""

import tareas
import os
import sys


# ============================================
# FUNCIONES DE INTERFAZ
# ============================================

def limpiar_pantalla():
    """
    Limpia la pantalla seg√∫n el sistema operativo.
    """
    # Detectamos el sistema operativo
    if sys.platform.startswith('win'):
        os.system('cls')
    else:
        os.system('clear')


def pausar():
    """
    Hace una pausa hasta que el usuario presione Enter.
    √ötil para dar tiempo a leer los mensajes.
    """
    input("\n‚û°Ô∏è Presione Enter para volver al men√∫...")


def linea_separadora(caracter="=", longitud=60):
    """
    Crea una l√≠nea separadora.
    
    Args:
        caracter (str): Car√°cter a usar para la l√≠nea
        longitud (int): Longitud de la l√≠nea
        
    Returns:
        str: L√≠nea separadora
    """
    return caracter * longitud


# ============================================
# FUNCIONES DE MENSAJES
# ============================================

def mostrar_bienvenida():
    """
    Muestra el mensaje de bienvenida al iniciar el programa.
    """
    pass


def mostrar_despedida():
    """
    Muestra el mensaje de despedida al salir del programa.
    """
    print("\n" + "=" * 60)
    print("         üëã ¬°HASTA LUEGO!")
    print("=" * 60)
    
    # Obtenemos estad√≠sticas para el mensaje final
    stats = tareas.obtener_estadisticas()
    
    if stats['total'] > 0:
        if stats['pendientes'] > 0:
            print(f"‚è∞ Recuerda: tienes {stats['pendientes']} tarea{'s' if stats['pendientes'] != 1 else ''} pendiente{'s' if stats['pendientes'] != 1 else ''}")
            
            # Mensaje motivacional seg√∫n la cantidad
            if stats['pendientes'] <= 3:
                print("   ¬°Casi terminas! Un √∫ltimo esfuerzo üí™")
            elif stats['pendientes'] <= 7:
                print("   ¬°T√∫ puedes! Organiza tu tiempo y lo lograr√°s üìö")
            else:
                print("   Divide y conquista. Una tarea a la vez üéØ")
        else:
            print("üéâ ¬°Todas las tareas completadas! ¬°Excelente trabajo!")
            print("   Disfruta tu tiempo libre, te lo has ganado üåü")
    else:
        print("üìù No olvides agregar tus tareas la pr√≥xima vez")
    
    print("\n¬°Que tengas un excelente d√≠a! üìö‚ú®")
    print("=" * 60)


def mostrar_error(mensaje):
    """
    Muestra un mensaje de error formateado.
    
    Args:
        mensaje (str): Mensaje de error a mostrar
    """
    print(f"\n‚ùå ERROR: {mensaje}")


def mostrar_exito(mensaje):
    """
    Muestra un mensaje de √©xito formateado.
    
    Args:
        mensaje (str): Mensaje de √©xito a mostrar
    """
    print(f"\n‚úÖ √âXITO: {mensaje}")


def mostrar_advertencia(mensaje):
    """
    Muestra un mensaje de advertencia formateado.
    
    Args:
        mensaje (str): Mensaje de advertencia a mostrar
    """
    print(f"\n‚ö†Ô∏è ADVERTENCIA: {mensaje}")


# ============================================
# FUNCIONES DE FORMATEO
# ============================================

def truncar_texto(texto, longitud_maxima):
    """
    Trunca un texto si excede la longitud m√°xima.
    
    Args:
        texto (str): Texto a truncar
        longitud_maxima (int): Longitud m√°xima permitida
        
    Returns:
        str: Texto truncado con "..." si fue necesario
    """
    if len(texto) > longitud_maxima:
        return texto[:longitud_maxima] + "..."
    return texto


def formatear_fecha(fecha):
    """
    Formatea una fecha para mostrarla de forma m√°s amigable.
    
    Por ahora solo devuelve la fecha tal cual, pero podr√≠amos
    expandir esto para dar formato especial.
    
    Args:
        fecha (str): Fecha a formatear
        
    Returns:
        str: Fecha formateada
    """
    # Por ahora devolvemos la fecha tal cual
    # En el futuro podr√≠amos agregar formato especial
    return fecha


def centrar_texto(texto, ancho=60):
    """
    Centra un texto en un ancho espec√≠fico.
    
    Args:
        texto (str): Texto a centrar
        ancho (int): Ancho total de la l√≠nea
        
    Returns:
        str: Texto centrado
    """
    return texto.center(ancho)


def crear_titulo(texto, simbolo="=", ancho=60):
    """
    Crea un t√≠tulo formateado con l√≠neas decorativas.
    
    Args:
        texto (str): Texto del t√≠tulo
        simbolo (str): S√≠mbolo para las l√≠neas
        ancho (int): Ancho total
        
    Returns:
        str: T√≠tulo formateado
    """
    linea = simbolo * ancho
    titulo_centrado = centrar_texto(texto, ancho)
    
    return f"{linea}\n{titulo_centrado}\n{linea}"


# ============================================
# FUNCIONES DE VALIDACI√ìN
# ============================================

def es_entero_valido(texto):
    """
    Verifica si un texto puede convertirse a entero.
    
    Args:
        texto (str): Texto a verificar
        
    Returns:
        bool: True si es un entero v√°lido, False si no
    """
    try:
        int(texto)
        return True
    except ValueError:
        return False


def validar_texto_no_vacio(texto):
    """
    Valida que un texto no est√© vac√≠o o solo con espacios.
    
    Args:
        texto (str): Texto a validar
        
    Returns:
        bool: True si el texto es v√°lido, False si no
    """
    return texto and texto.strip() != ""


def confirmar_accion(mensaje="¬øEst√° seguro?"):
    """
    Pide confirmaci√≥n al usuario para una acci√≥n.
    
    Args:
        mensaje (str): Mensaje de confirmaci√≥n
        
    Returns:
        bool: True si confirma, False si no
    """
    respuesta = input(f"\n{mensaje} (S/N): ").upper().strip()
    return respuesta == "S"


# ============================================
# FUNCIONES DE INFORMACI√ìN
# ============================================

def obtener_version():
    """
    Devuelve la versi√≥n del programa.
    
    Returns:
        str: Versi√≥n del programa
    """
    return "1.0.0"


def obtener_autor():
    """
    Devuelve el autor del programa.
    
    Returns:
        str: Autor del programa
    """
    return "Estudiante de Python"


def mostrar_ayuda():
    """
    Muestra la ayuda del programa.
    """
    print("\n" + "=" * 60)
    print("         üìñ AYUDA DEL PROGRAMA")
    print("=" * 60)
    
    print("\nOPCIONES DISPONIBLES:")
    print("-" * 40)
    print("1. Agregar tarea: Permite crear una nueva tarea")
    print("2. Ver todas: Muestra todas las tareas organizadas")
    print("3. Por materia: Filtra las tareas de una materia")
    print("4. Completar: Marca una tarea como terminada")
    print("5. Eliminar: Borra una tarea del sistema")
    print("6. Pendientes: Muestra solo lo que falta hacer")
    print("7. Estad√≠sticas: Muestra an√°lisis detallado")
    print("8. Salir: Guarda y cierra el programa")
    
    print("\nCONSEJOS:")
    print("-" * 40)
    print("‚Ä¢ Usa fechas descriptivas (Lunes, Ma√±ana, etc.)")
    print("‚Ä¢ Las tareas se guardan autom√°ticamente")
    print("‚Ä¢ Puedes usar Ctrl+C para salir en emergencia")
    print("‚Ä¢ El archivo de tareas es 'tareas.json'")
    
    print("\nVERSI√ìN:", obtener_version())
    print("AUTOR:", obtener_autor())
    print("=" * 60)
